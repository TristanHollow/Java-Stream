import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Tristan
 */
public class LearnerDetails extends javax.swing.JFrame {

    /**
     * Creates new form LearnerDetails
     */
    public LearnerDetails() {
        initComponents();
    }

    public static String phase = "first";
    public static String sort = "";
    public static String sortPart = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOutput = new javax.swing.JTable();
        progEnrolled = new javax.swing.JProgressBar();
        rgbFirst = new javax.swing.JRadioButton();
        rgbSecond = new javax.swing.JRadioButton();
        rgbThird = new javax.swing.JRadioButton();
        rgbFourth = new javax.swing.JRadioButton();
        cmbSortBy = new javax.swing.JComboBox<>();
        lblEnrolled = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        lblAgeGroupings = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblOutput);

        buttonGroup1.add(rgbFirst);
        rgbFirst.setText("Foundation Phase");
        rgbFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbFirstActionPerformed(evt);
            }
        });

        buttonGroup1.add(rgbSecond);
        rgbSecond.setText("Intermediate Phase");
        rgbSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbSecondActionPerformed(evt);
            }
        });

        buttonGroup1.add(rgbThird);
        rgbThird.setText("Senior Phase");
        rgbThird.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbThirdActionPerformed(evt);
            }
        });

        buttonGroup1.add(rgbFourth);
        rgbFourth.setText("All Phases");
        rgbFourth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbFourthActionPerformed(evt);
            }
        });

        cmbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by ID (ASC)", "Sort by ID (DESC)", "Sort by Name (ASC)", "Sort by Name (DESC)", "Sort by Surname (ASC)", "Sort by Surname (DESC)"}));
        cmbSortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortByActionPerformed(evt);
            }
        });

        lblEnrolled.setText("Learners Enrolled / Learners Rejected");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblAgeGroupings.setText("Age Groupings");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblAgeGroupings)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rgbFirst)
                            .addComponent(rgbSecond)
                            .addComponent(rgbThird)
                            .addComponent(rgbFourth)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearch)
                                    .addComponent(cmbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(progEnrolled, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 999, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblEnrolled)
                        .addGap(403, 403, 403))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblAgeGroupings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rgbFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rgbSecond)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rgbThird)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rgbFourth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(lblEnrolled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progEnrolled, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );


        ////////////////////////
        //ProgressBar 

        int i = 80; //(80 uit 100)

        try {
            progEnrolled.setValue(i);
        } catch (Exception e) {
            //TODO: handle exception
        }

        //
        ////////////////////////

        rgbFirst.setSelected(true);

        MethodFile.person = "learner";
        MethodFile.table = "learner_tbl";
       
        tablePrintRecords("default");


        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rgbFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbFirstActionPerformed
        // TODO add your handling code here:

        phase = "first";
        tablePrintRecords("default");

    }//GEN-LAST:event_rgbFirstActionPerformed

    private void rgbSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbSecondActionPerformed
        // TODO add your handling code here:

        phase = "second";
        tablePrintRecords("default");

    }//GEN-LAST:event_rgbSecondActionPerformed

    private void rgbThirdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbThirdActionPerformed
        // TODO add your handling code here:

        phase = "third";
        tablePrintRecords("default");

    }//GEN-LAST:event_rgbThirdActionPerformed

    private void rgbFourthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbFourthActionPerformed
        // TODO add your handling code here:

        phase = "fourth";
        tablePrintRecords("default");

    }//GEN-LAST:event_rgbFourthActionPerformed

    private void cmbSortByActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:

        sort = cmbSortBy.getItemAt(cmbSortBy.getSelectedIndex());
        tablePrintRecords("sort");
    }                                         

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:

        int originalID = MethodFile.recordID;
        int replacement = MethodFile.getRecordID();


        if (MethodFile.testRecord(String.valueOf(replacement)) == true) {
            MethodFile.recordID = replacement;
            if (MethodFile.recordExists("default") == true) {
               
                tablePrintRecords("search");
            } else {

                MethodFile.recordID = originalID;
                
            }
        }
    }  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LearnerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LearnerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LearnerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LearnerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LearnerDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progEnrolled;
    private static javax.swing.JRadioButton rgbFirst;
    private static javax.swing.JRadioButton rgbFourth;
    private static javax.swing.JRadioButton rgbSecond;
    private static javax.swing.JRadioButton rgbThird;
    private static javax.swing.JTable tblOutput;
    private javax.swing.JComboBox<String> cmbSortBy;
    private javax.swing.JLabel lblAgeGroupings;
    private javax.swing.JLabel lblEnrolled;
    // End of variables declaration//GEN-END:variables

    public static void tablePrintRecords(String input){

        String sqlAdd = "";

        switch (phase) {
            case "first":
                sqlAdd = " WHERE (age BETWEEN 6 AND 9)";
                break;
            case "second":
                sqlAdd = " WHERE (age BETWEEN 10 AND 14)";
                break;
            case "third":
                sqlAdd = " WHERE (age BETWEEN 15 AND 17)";
                break;
            case "fourth":
                sqlAdd = " WHERE (age BETWEEN 6 AND 17)";
                break;
            default:
                break;
        }  

        
        Connection conn = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + MethodFile.databaseName,"root","root");
            String sql = "";


            Statement stmt;
            ResultSet result;

            DefaultTableModel model = new DefaultTableModel(new String[]{"Learner ID", "Name", "Surname", "Age", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject"}, 0);

            if (input.equals("default")) { 
            
                

                    model = new DefaultTableModel(new String[]{"Learner ID", "Name", "Surname", "Age", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject"}, 0);

                    if (MethodFile.loginPerson.equals("parent")) {
                        
                        sql = "SELECT * FROM learner_tbl" + sqlAdd + " AND (parent_id = " + MethodFile.loginID+")";
                    } else
                     if (MethodFile.loginPerson.equals("teacher")) {
                        sql = "SELECT * FROM learner_tbl" + sqlAdd;
                    } else if (MethodFile.loginPerson.equals("admin")) {
                        sql = "SELECT * FROM learner_tbl" + sqlAdd;
                    }

                    

                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                    while(result.next()) {

                        String learnerID = String.valueOf(result.getInt("learner_id"));
                        
                        String name = result.getString("names");
                        String surname = result.getString("last_name");
                        
                        String age = String.valueOf(result.getInt("age"));
                        
                        String subject1 = result.getString("subject1");
                        String subject2 = result.getString("subject2");
                        String subject3 = result.getString("subject3");
                        String subject4 = result.getString("subject4");
                        String subject5 = result.getString("subject5");
                        String subject6 = result.getString("subject6");
                        String subject7 = result.getString("subject7");
                
                        model.addRow(new Object[]{learnerID, name, surname, age, subject1, subject2, subject3, subject4, subject5, subject6, subject7});
                    }
                

            } else if (input.equals("search")) { //search button

                if (MethodFile.testRecord(String.valueOf( MethodFile.recordID)) == true) {
                    if (MethodFile.recordExists("default") == true) {

                        if (MethodFile.table.equals("learner_tbl")) {
                            model = new DefaultTableModel(new String[]{"Learner ID", "Name", "Surname", "Age", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject"}, 0);

                            if (MethodFile.loginPerson.equals("parent")) {

                                sql = "SELECT * FROM learner_tbl " + 
                                "WHERE(parent_id = " + MethodFile.loginID+") AND (learner_id = " + MethodFile.recordID + ")";
                            } else if (MethodFile.loginPerson.equals("teacher")) {
                                sql = "SELECT * FROM learner_tbl WHERE (learner_id = " + MethodFile.recordID + ")";
                            } else if (MethodFile.loginPerson.equals("admin")) {
                                sql = "SELECT * FROM learner_tbl WHERE (learner_id = " + MethodFile.recordID + ")";
                            }
        
                            stmt = conn.createStatement();
                            result = stmt.executeQuery(sql);

                            if(result.next()) {

                                String learnerID = String.valueOf(result.getInt("learner_id"));
                                
                                String name = result.getString("names");
                                String surname = result.getString("last_name");
                                
                                String age = String.valueOf(result.getInt("age"));
                                
                                String subject1 = result.getString("subject1");
                                String subject2 = result.getString("subject2");
                                String subject3 = result.getString("subject3");
                                String subject4 = result.getString("subject4");
                                String subject5 = result.getString("subject5");
                                String subject6 = result.getString("subject6");
                                String subject7 = result.getString("subject7");

                                if ((Integer.valueOf(age) >= 6) && (Integer.valueOf(age) <= 9)){
                                    rgbFirst.setSelected(true);
                                }
                                if ((Integer.valueOf(age) >= 10) && (Integer.valueOf(age) <= 14)){
                                    rgbSecond.setSelected(true);
                                }
                                if ((Integer.valueOf(age) >= 15) && (Integer.valueOf(age) <= 17)){
                                    rgbThird.setSelected(true);
                                }
                        
                                model.addRow(new Object[]{learnerID, name, surname, age, subject1, subject2, subject3, subject4, subject5, subject6, subject7});
                            }
                                                
                        } 


                    } else {
                        JOptionPane.showMessageDialog(null, "An error has occurred.");
                    }
                    
                } 

            } else if (input.equals("sort")) { //sort button

                switch (sort) {
                    case "Sort by ID (ASC)":
                        if (MethodFile.table.equals("learner_tbl")) {
                            sortPart = " ORDER BY learner_id ASC";
                        }

                        break;
                    case "Sort by ID (DESC)":
                        if (MethodFile.table.equals("learner_tbl")) {
                            sortPart = " ORDER BY learner_id DESC";
                        }
                        
                        break;
                    case "Sort by Name (ASC)":
                            sortPart = " ORDER BY names ASC";
                        break;
                    case "Sort by Name (DESC)":
                            sortPart = " ORDER BY names DESC";
                        break;
                    case "Sort by Surname (ASC)":
                            sortPart = " ORDER BY last_name ASC";
                        break;
                    case "Sort by Surname (DESC)":
                        sortPart = " ORDER BY last_name DESC";
                    break;
                }
            
                if (MethodFile.table.equals("learner_tbl")) {

                    model = new DefaultTableModel(new String[]{"Learner ID", "Name", "Surname", "Age", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject", "Subject"}, 0);

                    if (MethodFile.loginPerson.equals("parent")) {

                        sql = "SELECT * FROM learner_tbl" + sqlAdd + " AND (parent_id = " + MethodFile.loginID+")" + sortPart;

                    } else
                     if (MethodFile.loginPerson.equals("teacher")) {

                        sql = "SELECT * FROM learner_tbl" + sqlAdd + sortPart;
                    } else if (MethodFile.loginPerson.equals("admin")) {
                        
                        sql = "SELECT * FROM learner_tbl" + sqlAdd + sortPart;
                    }


                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while(result.next()) {

                            String learnerID = String.valueOf(result.getInt("learner_id"));
                            
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            
                            String age = String.valueOf(result.getInt("age"));
                            
                            String subject1 = result.getString("subject1");
                            String subject2 = result.getString("subject2");
                            String subject3 = result.getString("subject3");
                            String subject4 = result.getString("subject4");
                            String subject5 = result.getString("subject5");
                            String subject6 = result.getString("subject6");
                            String subject7 = result.getString("subject7");
                    
                            model.addRow(new Object[]{learnerID, name, surname, age, subject1, subject2, subject3, subject4, subject5, subject6, subject7});
                        }
                        
                }
            }

            tblOutput.setModel(model);

            conn.close();

        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println("An error has occurred.");
            ex.printStackTrace();
            return;
        }
            
    

    }

}
