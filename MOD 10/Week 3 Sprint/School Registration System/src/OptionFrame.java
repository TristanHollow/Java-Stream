import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Tristan
 */
public class OptionFrame extends javax.swing.JFrame {

    /**
     * Creates new form OptionFrame
     */

    public static String sort = "";
    public static String sortPart = "";
    //public static boolean sortIt = false;

    public OptionFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbSortBy = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        tblOutput = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pnlNonAdmin = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        pnlTables = new javax.swing.JPanel();
        btnLearner = new javax.swing.JButton();
        btnLearnerInfo = new javax.swing.JButton();
        btnParent = new javax.swing.JButton();
        btnTeacher = new javax.swing.JButton();
        pnlAdmin = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"
            }
        ));
        tblOutput.setViewportView(jTable1);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by ID (ASC)", "Sort by ID (DESC)", "Sort by Name (ASC)", "Sort by Name (DESC)", "Sort by Surname (ASC)", "Sort by Surname (DESC)"}));
        cmbSortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortByActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNonAdminLayout = new javax.swing.GroupLayout(pnlNonAdmin);
        pnlNonAdmin.setLayout(pnlNonAdminLayout);
        pnlNonAdminLayout.setHorizontalGroup(
            pnlNonAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNonAdminLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(pnlNonAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addComponent(cmbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        pnlNonAdminLayout.setVerticalGroup(
            pnlNonAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNonAdminLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(cmbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnLearner.setText("Learner");
        btnLearner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnerActionPerformed(evt);
            }
        });

        btnParent.setText("Parent");
        btnParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParentActionPerformed(evt);
            }
        });

        btnTeacher.setText("Teacher");
        btnTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherActionPerformed(evt);
            }
        });

        btnLearnerInfo.setText("More Learner Details");
        btnLearnerInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLearnerInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTablesLayout = new javax.swing.GroupLayout(pnlTables);
        pnlTables.setLayout(pnlTablesLayout);
        pnlTablesLayout.setHorizontalGroup(
            pnlTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablesLayout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(pnlTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTablesLayout.createSequentialGroup()
                        .addComponent(btnLearner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnParent)
                        .addGap(18, 18, 18)
                        .addComponent(btnTeacher))
                    .addGroup(pnlTablesLayout.createSequentialGroup()
                        .addComponent(btnLearnerInfo)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlTablesLayout.setVerticalGroup(
            pnlTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablesLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLearner)
                    .addComponent(btnParent)
                    .addComponent(btnTeacher))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(btnLearnerInfo))
        );

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminLayout = new javax.swing.GroupLayout(pnlAdmin);
        pnlAdmin.setLayout(pnlAdminLayout);
        pnlAdminLayout.setHorizontalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete)
                    .addComponent(btnCreate)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate))
                .addGap(25, 25, 25))
        );
        pnlAdminLayout.setVerticalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnUpdate)
                .addGap(30, 30, 30)
                .addComponent(btnInsert)
                .addGap(27, 27, 27)
                .addComponent(btnCreate)
                .addGap(30, 30, 30)
                .addComponent(btnDelete)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlTables, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pnlNonAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tblOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(pnlTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlNonAdmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tblOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

MethodFile.table = "learner_tbl";
MethodFile.person = "learner";
tablePrintRecords("default");

switch (MethodFile.loginPerson){
    case "parent":
        btnCreate.setVisible(false);
        btnDelete.setVisible(false);
        btnInsert.setVisible(false);
        btnUpdate.setVisible(false);

        btnTeacher.setVisible(false);
        btnParent.setVisible(false);
        break;

    case "teacher":
        btnCreate.setVisible(false);
        btnDelete.setVisible(false);
        btnInsert.setVisible(false);
        btnUpdate.setVisible(false);
        
        btnTeacher.setVisible(false);
        break;

    case "admin":
        btnUpdate.setVisible(false);
        break;

    default:
        break;
}

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        int originalID = MethodFile.recordID;
        int replacement = MethodFile.getRecordID();


        if (MethodFile.testRecord(String.valueOf(replacement)) == true) {
            MethodFile.recordID = replacement;
            if (MethodFile.recordExists("default") == true) {
                
                tablePrintRecords("search");
            } else {
                JOptionPane.showMessageDialog(null, "Record not found in database.");
                MethodFile.recordID = originalID;
                
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnLearnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLearnerActionPerformed

        MethodFile.person = "learner";
        MethodFile.table = "learner_tbl";
        tablePrintRecords("default");

    }//GEN-LAST:event_btnLearnerActionPerformed

    private void btnLearnerInfoActionPerformed(java.awt.event.ActionEvent evt) {    
        LearnerDetails detailed = new LearnerDetails();
        detailed.setVisible(true);       
        
        // TODO add your handling code here:
    }   

    private void btnParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParentActionPerformed

        MethodFile.person = "parent";
        MethodFile.table = "parent_tbl";
        tablePrintRecords("default");

    }//GEN-LAST:event_btnParentActionPerformed

    private void btnTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherActionPerformed

        MethodFile.person = "teacher";
        MethodFile.table = "teacher_tbl";
        tablePrintRecords("default");

    }//GEN-LAST:event_btnTeacherActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        int originalID = MethodFile.recordID;
        int replacement = MethodFile.getRecordID();


        if (MethodFile.testRecord(String.valueOf( replacement )) == true) {

            MethodFile.recordID = replacement;

            if (MethodFile.recordExists("default") == true) {
                if (MethodFile.table.equals("learner_tbl")) {
                    learnerFrame learnframe = new learnerFrame();
                    learnframe.setVisible(true);
                } else if (MethodFile.table.equals("parent_tbl")) {
                    otherFrame oFrame = new otherFrame();
                    oFrame.setVisible(true);
                } if (MethodFile.table.equals("teacher_tbl")) {
                    otherFrame oFrame = new otherFrame();
                    oFrame.setVisible(true);
                }
            } else {
                MethodFile.recordID = originalID;
                JOptionPane.showMessageDialog(null, "An error has occurred.");

            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed

        if (MethodFile.table.equals("learner_tbl")) {
            learnerFrame learnframe = new learnerFrame();
            learnframe.setVisible(true);
        } else if (MethodFile.table.equals("parent_tbl") || MethodFile.table.equals("teacher_tbl")) {
            otherFrame oFrame = new otherFrame();
            oFrame.setVisible(true);
        }
        
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed

        MethodFile.tableCreate();
        tablePrintRecords("default");

    
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int originalID = MethodFile.recordID;
        int replacement = MethodFile.getRecordID();


        if (MethodFile.testRecord(String.valueOf(replacement)) == true) {
            MethodFile.recordID = replacement;
            if (MethodFile.recordExists("default") == true) {
                MethodFile.tableDeleteRecords();
                tablePrintRecords("default");
            } else {

                MethodFile.recordID = originalID;
                JOptionPane.showMessageDialog(null, "Record not found in database.");
            }
        }


        

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbSortByActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        
        sort = cmbSortBy.getItemAt(cmbSortBy.getSelectedIndex());
        tablePrintRecords("sort");
    }  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OptionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLearner;
    private javax.swing.JButton btnLearnerInfo;
    private javax.swing.JButton btnParent;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTeacher;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JTable jTable1;
    private javax.swing.JPanel pnlAdmin;
    private javax.swing.JPanel pnlNonAdmin;
    private javax.swing.JPanel pnlTables;
    private javax.swing.JScrollPane tblOutput;
    private javax.swing.JComboBox<String> cmbSortBy;
    // End of variables declaration//GEN-END:variables


    public static void tablePrintRecords(String input){

        
        
        Connection conn = null;

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + MethodFile.databaseName,"root","root");
            String sql = "";

            Statement stmt;
            ResultSet result;

            DefaultTableModel model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);

            if (input.equals("default")) { //login and table change
            
                if (MethodFile.table.equals("learner_tbl")) {

                    model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);

                    if (MethodFile.loginPerson.equals("parent")) {
                        sql = "SELECT learner_id, parent_id, names, last_name, date_of_birth, gender, grade FROM learner_tbl " + 
                        "WHERE(parent_id = " + MethodFile.loginID+")";
                    } else
                     if (MethodFile.loginPerson.equals("teacher")) {
                        sql = "SELECT * FROM learner_tbl";
                    } else if (MethodFile.loginPerson.equals("admin")) {
                        sql = "SELECT * FROM learner_tbl";
                    }


                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                    while(result.next()) {

                        String learnerID = String.valueOf(result.getInt("learner_id"));
                        String parentID = String.valueOf(result.getInt("parent_id"));
                        String name = result.getString("names");
                        String surname = result.getString("last_name");
                        String birthdate = result.getString("date_of_birth");
                        String gender = result.getString("gender");
                        String grade = String.valueOf(result.getInt("grade"));
                
                        model.addRow(new Object[]{learnerID, parentID, name, surname, birthdate, gender, grade});
                    }
                        
                } else if (MethodFile.table.equals("parent_tbl")) {

                    

                    if (MethodFile.loginPerson.equals("teacher")) {
                        
                        model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children"}, 0);   

                        sql = "SELECT * FROM parent_tbl";

                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String parentID = String.valueOf(result.getInt("parent_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String numChildren = String.valueOf(result.getInt("num_children"));

                            model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren});
                        }


                    } else if (MethodFile.loginPerson.equals("admin")) {
                        model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children", "Username", "Password"}, 0);


                        sql = "SELECT * FROM parent_tbl";

                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String parentID = String.valueOf(result.getInt("parent_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String numChildren = String.valueOf(result.getInt("num_children"));
                            String usernameModel = result.getString("username");
                            String passwordModel = result.getString("password");

                            model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren, usernameModel, passwordModel});
                        }
                    }

                    jTable1.setModel(model);

                } else if (MethodFile.table.equals("teacher_tbl")) {
                    if (MethodFile.loginPerson.equals("admin")) {

                        model = new DefaultTableModel(new String[]{"Teacher ID", "Name", "Surname", "Address", "Contact No", "Username", "Password"}, 0);

                        sql = "SELECT * FROM teacher_tbl";

                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String teacherID = String.valueOf(result.getInt("teacher_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String usernameModel = result.getString("username");
                            String passwordModel = result.getString("password");

                            model.addRow(new Object[]{teacherID, name, surname, address, contactNo, usernameModel, passwordModel});
                        }
                    }
                }

                

            } else if (input.equals("search")) { //search button

                if (MethodFile.testRecord(String.valueOf( MethodFile.recordID)) == true) {
                    if (MethodFile.recordExists("default") == true) {

                        if (MethodFile.table.equals("learner_tbl")) {
                            model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);

                            if (MethodFile.loginPerson.equals("parent")) {
                                
                                sql = "SELECT * FROM learner_tbl " + 
                                "WHERE(parent_id = " + MethodFile.loginID+") AND (learner_id = " + MethodFile.recordID + ")";
                            } else if (MethodFile.loginPerson.equals("teacher")) {
                                sql = "SELECT * FROM learner_tbl WHERE (learner_id = " + MethodFile.recordID + ")";
                            } else if (MethodFile.loginPerson.equals("admin")) {
                                sql = "SELECT * FROM learner_tbl WHERE (learner_id = " + MethodFile.recordID + ")";
                            }
                            
        
                            stmt = conn.createStatement();
                            result = stmt.executeQuery(sql);

                            if(result.next()) {
        
                                String learnerID = String.valueOf(result.getInt("learner_id"));
                                String parentID = String.valueOf(result.getInt("parent_id"));
                                String name = result.getString("names");
                                String surname = result.getString("last_name");
                                String birthdate = result.getString("date_of_birth");
                                String gender = result.getString("gender");
                                String grade = String.valueOf(result.getInt("grade"));
                        
                                model.addRow(new Object[]{learnerID, parentID, name, surname, birthdate, gender, grade});
                            }
                                                
                        } else if (MethodFile.table.equals("parent_tbl")) {
                            
                            if (MethodFile.loginPerson.equals("teacher")) {
                        
                                model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children"}, 0);
                                
                                sql = "SELECT * FROM parent_tbl WHERE (parent_id = " + MethodFile.recordID + ")";
        
                                stmt = conn.createStatement();
                                result = stmt.executeQuery(sql);

                                if (result.next()) {
                                    String parentID = String.valueOf(result.getInt("parent_id"));
                                    String name = result.getString("names");
                                    String surname = result.getString("last_name");
                                    String address = result.getString("address");
                                    String contactNo = result.getString("contact_no");
                                    String numChildren = String.valueOf(result.getInt("num_children"));
        
                                    model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren});
                                }
        
        
                            } else if (MethodFile.loginPerson.equals("admin")) {
                                model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children", "Username", "Password"}, 0);
        
                                sql = "SELECT * FROM parent_tbl WHERE (parent_id = " + MethodFile.recordID + ")";
        
                                stmt = conn.createStatement();
                                result = stmt.executeQuery(sql);

                                if (result.next()) {
                                    String parentID = String.valueOf(result.getInt("parent_id"));
                                    String name = result.getString("names");
                                    String surname = result.getString("last_name");
                                    String address = result.getString("address");
                                    String contactNo = result.getString("contact_no");
                                    String numChildren = String.valueOf(result.getInt("num_children"));
                                    String usernameModel = result.getString("username");
                                    String passwordModel = result.getString("password");
        
                                    model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren, usernameModel, passwordModel});
                                }
                            }

                        } else if (MethodFile.table.equals("teacher_tbl")) {
                            if (MethodFile.loginPerson.equals("admin")) {

                                model = new DefaultTableModel(new String[]{"Teacher ID", "Name", "Surname", "Address", "Contact No", "Username", "Password"}, 0);
        
                                sql = "SELECT * FROM teacher_tbl WHERE (teacher_id = " + MethodFile.recordID + ")";
        
                                stmt = conn.createStatement();
                                result = stmt.executeQuery(sql);

                                if (result.next()) {
                                    String teacherID = String.valueOf(result.getInt("teacher_id"));
                                    String name = result.getString("names");
                                    String surname = result.getString("last_name");
                                    String address = result.getString("address");
                                    String contactNo = result.getString("contact_no");
                                    String usernameModel = result.getString("username");
                                    String passwordModel = result.getString("password");

                                    model.addRow(new Object[]{teacherID, name, surname, address, contactNo, usernameModel, passwordModel});
                                }
                            
                            }
                        }


                    } else {
                        JOptionPane.showMessageDialog(null, "An error has occurred.");
                    }
                    
                } 

            } else if (input.equals("sort")) { //sort button

                switch (sort) {
                    case "Sort by ID (ASC)":
                        if (MethodFile.table.equals("learner_tbl")) {
                            sortPart = " ORDER BY learner_id ASC";
                        }
                        if (MethodFile.table.equals("parent_tbl")) {
                            sortPart = " ORDER BY parent_id ASC";
                        }
                        if (MethodFile.table.equals("teacher_tbl")) {
                            sortPart = " ORDER BY teacher_id ASC";
                        }
                        break;
                    case "Sort by ID (DESC)":
                        if (MethodFile.table.equals("learner_tbl")) {
                            sortPart = " ORDER BY learner_id DESC";
                        }
                        if (MethodFile.table.equals("parent_tbl")) {
                            sortPart = " ORDER BY parent_id DESC";
                        }
                        if (MethodFile.table.equals("teacher_tbl")) {
                            sortPart = " ORDER BY teacher_id DESC";
                        }
                        break;
                    case "Sort by Name (ASC)":
                            sortPart = " ORDER BY names ASC";
                        break;
                    case "Sort by Name (DESC)":
                            sortPart = " ORDER BY names DESC";
                        break;
                    case "Sort by Surname (ASC)":
                            sortPart = " ORDER BY last_name ASC";
                        break;
                    case "Sort by Surname (DESC)":
                        sortPart = " ORDER BY last_name DESC";
                    break;
                }
            
                if (MethodFile.table.equals("learner_tbl")) {

                    model = new DefaultTableModel(new String[]{"Learner ID", "Parent ID", "Name", "Surname", "Date of Birth", "Gender", "Grade"}, 0);

                    if (MethodFile.loginPerson.equals("parent")) {
                        sql = "SELECT learner_id, parent_id, names, last_name, date_of_birth, gender, grade FROM learner_tbl " + 
                        "WHERE(parent_id = " + MethodFile.loginID+")" + sortPart;
                    } else
                     if (MethodFile.loginPerson.equals("teacher")) {
                        sql = "SELECT * FROM learner_tbl" + sortPart;
                    } else if (MethodFile.loginPerson.equals("admin")) {
                        sql = "SELECT * FROM learner_tbl" + sortPart;
                    }

                    


                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                    while(result.next()) {

                        String learnerID = String.valueOf(result.getInt("learner_id"));
                        String parentID = String.valueOf(result.getInt("parent_id"));
                        String name = result.getString("names");
                        String surname = result.getString("last_name");
                        String birthdate = result.getString("date_of_birth");
                        String gender = result.getString("gender");
                        String grade = String.valueOf(result.getInt("grade"));
                
                        model.addRow(new Object[]{learnerID, parentID, name, surname, birthdate, gender, grade});
                    }
                        
                } else if (MethodFile.table.equals("parent_tbl")) {

                    

                    if (MethodFile.loginPerson.equals("teacher")) {
                        
                        model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children"}, 0);

                        sql = "SELECT * FROM parent_tbl" + sortPart;


                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String parentID = String.valueOf(result.getInt("parent_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String numChildren = String.valueOf(result.getInt("num_children"));

                            model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren});
                        }


                    } else if (MethodFile.loginPerson.equals("admin")) {
                        model = new DefaultTableModel(new String[]{"Parent ID", "Name", "Surname", "Address", "Contact No", "Number of Children", "Username", "Password"}, 0);


                        sql = "SELECT * FROM parent_tbl" + sortPart;


                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String parentID = String.valueOf(result.getInt("parent_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String numChildren = String.valueOf(result.getInt("num_children"));
                            String usernameModel = result.getString("username");
                            String passwordModel = result.getString("password");

                            model.addRow(new Object[]{parentID, name, surname, address, contactNo, numChildren, usernameModel, passwordModel});
                        }
                    }

                    jTable1.setModel(model);

                } else if (MethodFile.table.equals("teacher_tbl")) {
                    if (MethodFile.loginPerson.equals("admin")) {

                        model = new DefaultTableModel(new String[]{"Teacher ID", "Name", "Surname", "Address", "Contact No", "Username", "Password"}, 0);

                        sql = "SELECT * FROM teacher_tbl" + sortPart;

                        stmt = conn.createStatement();
                        result = stmt.executeQuery(sql);

                        while (result.next()) {
                            String teacherID = String.valueOf(result.getInt("teacher_id"));
                            String name = result.getString("names");
                            String surname = result.getString("last_name");
                            String address = result.getString("address");
                            String contactNo = result.getString("contact_no");
                            String usernameModel = result.getString("username");
                            String passwordModel = result.getString("password");

                            model.addRow(new Object[]{teacherID, name, surname, address, contactNo, usernameModel, passwordModel});
                        }
                    }
                }

                

            }

            jTable1.setModel(model);

            conn.close();

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Table not found. Admin needs to create missing table.");
            // System.out.println("An error has occurred.");
            ex.printStackTrace();
            return;
        }
            
    }

}
